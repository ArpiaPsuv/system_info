#include <iostream>
#include <string.h>
#include <fstream>
#include <codecvt>
#include "globalVars.h"
#include "saveSpecs.h"
#include "SystemInfo.h"
#include "utility.h"
using namespace std;
const TCHAR *saveSpecs::xmlDTD = _T("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n");
const TCHAR *saveSpecs::uniformComment = _T("Generated by -SystemInfo- on ");
const TCHAR *saveSpecs::htmlCommentStart = _T("<!-- ");
const TCHAR *saveSpecs::htmlCommentEnd = _T("-->\n");
const TCHAR *saveSpecs::CSSCommentStart = _T("/*");
const TCHAR *saveSpecs::CSSCommentEnd = _T("*/\n");
saveSpecs::saveSpecs() {
	
}
bool saveSpecs::saveAsHTML(HWND hwnd, SystemInfo *info)
{
	TCHAR fullSavePath[256];

	ZeroMemory(&fullSavePath, sizeof(fullSavePath));

	openFileDiag(hwnd, FILE_EXTENSION::HTML, fullSavePath);

	std::locale loc(std::locale::classic(), new std::codecvt_utf8<wchar_t>); //this line is necessary to output non-ascii text
	wofstream htmlOutFile;
	htmlOutFile.open(fullSavePath, wofstream::out);
	htmlOutFile.imbue(loc);
	TCHAR commentBuff[256] = {0};
	getCurrentDateTimeVerbose(commentBuff);
	htmlOutFile<<saveSpecs::htmlCommentStart;
	htmlOutFile<<saveSpecs::uniformComment;
	htmlOutFile<<commentBuff;
	htmlOutFile << saveSpecs::htmlCommentEnd;
	htmlOutFile << saveSpecs::htmlStartPoint;
	htmlOutFile << L"<div id=\"hardwareinfo\">\n";
	for (int x = 0; x < 10; x++) {
		htmlOutFile << _T("\t<div class=\"item\">\n");
		htmlOutFile << _T("\t\t<div class=\"header\">");

		htmlOutFile << itemStrings[x].c_str();
		htmlOutFile << _T("\t\t</div>\n");
		htmlOutFile << _T("\t\t<div class=\"info\">");
		writeToFile(htmlOutFile, info, x);
		htmlOutFile << L"\t</div>\n</div>\n";
	}
	htmlOutFile << L"</div>\n</body>\n</html>\n";
	htmlOutFile.close();
	return true;
}
bool saveSpecs::saveAsXML(HWND hwnd, SystemInfo *info) {
	TCHAR fullSavePath[256];

	ZeroMemory(&fullSavePath, sizeof(fullSavePath));

	openFileDiag(hwnd, FILE_EXTENSION::XML, fullSavePath);

	std::locale loc(std::locale::classic(), new std::codecvt_utf8<wchar_t>); //this line is necessary to output non-ascii text
	wofstream xmlOutFile;
	xmlOutFile.open(fullSavePath, wofstream::out);
	xmlOutFile.imbue(loc);
	TCHAR commentBuff[256] = { 0 };
	getCurrentDateTimeVerbose(commentBuff);
	xmlOutFile << saveSpecs::xmlDTD;
	xmlOutFile << saveSpecs::htmlCommentStart;
	xmlOutFile << saveSpecs::uniformComment;
	xmlOutFile << commentBuff;
	xmlOutFile << saveSpecs::htmlCommentEnd;
	
	xmlOutFile<<L"<hardwareinfo>\n";
	for (int x = 0; x < 10; x++) {
		xmlOutFile << _T("\t<item type=\"");
		xmlOutFile << itemStrings[x].c_str();
		xmlOutFile << _T("\">\n\t\t");
		//wrap this part
		writeToFile(xmlOutFile, info, x);
		xmlOutFile << L"\t</item>\n";
	}
	xmlOutFile<<L"</hardwareinfo>\n";
	xmlOutFile.close();
	return true;
}
bool saveSpecs::saveAsBin(HWND hwnd,SystemInfo *info) {
	return true;
}
bool saveSpecs::saveAsText(HWND hwnd,SystemInfo *info) {
	TCHAR fullSavePath[256];

	ZeroMemory(&fullSavePath, sizeof(fullSavePath));

	openFileDiag(hwnd, FILE_EXTENSION::TXT, fullSavePath);

	std::locale loc(std::locale::classic(), new std::codecvt_utf8<wchar_t>); //this line is necessary to output non-ascii text
	wofstream txtOutFile;
	txtOutFile.open(fullSavePath, wofstream::out);
	txtOutFile.imbue(loc);
	TCHAR commentBuff[256] = { 0 };
	txtOutFile << saveSpecs::uniformComment;
	txtOutFile << commentBuff;
	txtOutFile << saveSpecs::xmlDTD;
	for (int x = 0; x < 10; x++) {
		txtOutFile << itemStrings[x].c_str();
		txtOutFile << _T(":\n");
		writeToFile(txtOutFile, info, x);
		txtOutFile<<endl;
	}
	txtOutFile.close();
	return true;
}
saveSpecs::~saveSpecs()
{
}
const TCHAR *saveSpecs::htmlStartPoint = _T("\
	<!DOCTYPE html>\n\
	<html>\n\
	<head>\
	<meta charset=\"utf-8\"/>\n\
	<style>\n\
	*\n\
\t{\n\
	\tfont-family: Helvetica;\n\
\t}\n\
\tdiv#hardwareinfo\n\
\t{\n\
\t\tmargin: auto;\n\
\t\twidth: 50%;\n\
\t}\n\
\t.item\n\
\t{\
\t\tborder: 1px solid #ccc;\n\
\t\tpadding: 0px;\n\
\t\tmargin-top: 10px;\n\
\t}\n\
\t.header{\n\
\t\tbackground-color: purple;\n\
\t\tcolor: #fff;\n\
\t\tborder-bottom: 1px solid #ccc;\n\
\t\tpadding-left: 10px;\n\
\t}\n\
\t.info{\n\
\t\tpadding-left: 10px;\n\
\t}\n\
</style>\n\
<title>Hardware Information</title>\n\
</head>\n\
<body>\n");