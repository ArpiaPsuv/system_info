#include <iostream>
#include <string.h>
#include <fstream>
#include <codecvt>
#include "globalVars.h"
#include "saveSpecs.h"
#include "SystemInfo.h"
#include "utility.h"
using namespace std;
const TCHAR *saveSpecs::xmlDTD = _T("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n");
const TCHAR *saveSpecs::htmlDTD = _T("<!DOCTYPE html>\n");
const wchar_t *saveSpecs::xmlHeaderComment = L"/* Generated by -SystemInfo- on mm/dd/yyyy (day of the week) 0:00:00PM*/";
saveSpecs::saveSpecs()
{
	
}
bool saveSpecs::saveAsHTML(SystemInfo *info)
{
	
}
bool saveSpecs::saveAsXML(SystemInfo *info) {
	std::locale loc(std::locale::classic(), new std::codecvt_utf8<wchar_t>); //this line is necessary to output non-ascii text
	wofstream xmlOutFile;
	xmlOutFile.open("W:\\as\\specs.xml", wofstream::out);
	xmlOutFile.imbue(loc);
	xmlOutFile<<saveSpecs::xmlDTD;
	xmlOutFile<<L"<hardwareinfo>\n";
	for (int x = 0; x < 10; x++) {
		xmlOutFile << _T("\t<item type=\"");
		xmlOutFile << itemStrings[x].c_str();;
		xmlOutFile << _T("\">\n\t\t");
		if (x>=4 && x<=7) {
			xmlOutFile << formListString(info, static_cast<HARDWARE_VECTOR_TYPE>(x%4)).c_str();
		}
		else {
			switch (x) {
				case 0: {
					xmlOutFile << info->getOS().c_str();
					break;
				}
				case 1: {
					xmlOutFile << info->getCPU().c_str();
					break;
				}
				case 2: {
					xmlOutFile << info->getMB().c_str();
					break;
				}
				case 3: {
					xmlOutFile << info->getRAM().c_str();
					break;
				}
			}
		}
		xmlOutFile << L"\t</item>\n";
	}
	xmlOutFile<<L"</hardwareinfo>\n";
	xmlOutFile.close();
	return true;
}
bool saveSpecs::saveAsBin(SystemInfo *info) {
	return true;
}
bool saveSpecs::saveAsText(SystemInfo *info) {
	return true;
}
saveSpecs::~saveSpecs()
{
}
